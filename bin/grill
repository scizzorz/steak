#!/usr/bin/env python3
import getopt
import imp
import os
import steak
import sys
import types

if '.' not in sys.path:
	sys.path.append('.')
if 'grill' not in sys.path:
	sys.path.append('grill')

def _import(filename, modulename='__grill__'):
	if os.path.exists(filename) and modulename not in sys.modules:
		sys.modules[modulename] = imp.load_source(modulename, filename)
		return sys.modules[modulename]

def _inspect(grill, module):
	attrs = (x for x in dir(module) if not x.startswith('__'))
	for attr in attrs:
		val = getattr(module, attr)
		if isinstance(val, types.FunctionType):
			setattr(module, attr, grill.steak(getattr(module, attr)))

if __name__ == '__main__':
	args = sys.argv[1:]

	files = [('grill.py', '__grill__')]

	if os.path.exists('grill'):
		for filename in os.listdir('grill'):
			basename, ext = os.path.splitext(filename)
			if ext == '.py':
				files.append((os.path.join('grill', filename), basename))

	grill = steak.Grill()

	for filename, modulename in files:
		mod = _import(filename, modulename)
		_inspect(grill, mod)

	grill.main(args)
